---
# VM ID generation and MAC address generation tasks

- name: Generate MAC address if not specified
  shell: |
    printf '52:54:00:%02x:%02x:%02x\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))
  register: generated_mac
  changed_when: false
  when: windows_vm.network.mac_address is not defined or windows_vm.network.mac_address == "" or windows_vm.network.mac_address == null

- name: Set MAC address fact
  set_fact:
    windows_mac_address: "{{ generated_mac.stdout if (windows_vm.network.mac_address is not defined or windows_vm.network.mac_address == '') else windows_vm.network.mac_address }}"

- name: Build network configuration string
  set_fact:
    windows_network_string: >-
      virtio={{ windows_mac_address }}{% if windows_vm.network.bridge | default('vmbr0') %},bridge={{ windows_vm.network.bridge }}{% endif %}{% if windows_vm.network.vlan_tag | default('') %},tag={{ windows_vm.network.vlan_tag }}{% endif %}{% if windows_vm.network.mtu | default('') %},mtu={{ windows_vm.network.mtu }}{% endif %}

- name: Debug MAC address generation
  debug:
    msg: |
      MAC Address Debug:
      - Generated MAC: {{ generated_mac.stdout | default('not generated') }}
      - Final MAC: {{ windows_mac_address }}
      - Network String: {{ windows_network_string }}

- name: Get next available VM ID if not specified
  shell: pvesh get /cluster/nextid
  register: next_vmid_output
  changed_when: false
  when: windows_vm.vmid is not defined or windows_vm.vmid == "" or windows_vm.vmid == null

- name: Find valid VM ID for Windows Gaming VM
  shell: |
    try_id={{ next_vmid_output.stdout | default('200') }}
    # Start from 200 for gaming VMs to avoid conflicts
    if [ "$try_id" -lt 200 ]; then
      try_id=200
    fi
    
    while true; do
      if [ -f "/etc/pve/qemu-server/${try_id}.conf" ] || [ -f "/etc/pve/lxc/${try_id}.conf" ]; then
        try_id=$((try_id + 1))
        continue
      fi
      if lvs --noheadings -o lv_name 2>/dev/null | grep -qE "(^|[-_])${try_id}($|[-_])"; then
        try_id=$((try_id + 1))
        continue
      fi
      # Check if VM ID is in common gaming range (200-299)
      if [ "$try_id" -gt 299 ]; then
        echo "Warning: VM ID $try_id is outside recommended gaming range (200-299)" >&2
      fi
      break
    done
    echo "$try_id"
  register: valid_vmid_output
  changed_when: false
  when: windows_vm.vmid is not defined or windows_vm.vmid == "" or windows_vm.vmid == null

- name: Set VM ID fact
  set_fact:
    windows_vm_id: "{{ valid_vmid_output.stdout if (windows_vm.vmid is not defined or windows_vm.vmid == '' or windows_vm.vmid == null) else windows_vm.vmid }}"

- name: Update disk names with actual VM ID
  set_fact:
    windows_disk0: "vm-{{ windows_vm_id }}-disk-0"  # EFI disk
    windows_disk1: "vm-{{ windows_vm_id }}-disk-1"  # Main system disk

- name: Update storage references with actual VM ID
  set_fact:
    windows_disk0_ref: "{{ windows_storage_location }}:{{ windows_disk0 }}"
    windows_disk1_ref: "{{ windows_storage_location }}:{{ windows_disk1 }}"

- name: Display VM identification summary
  debug:
    msg: |
      ✅ Windows Gaming VM Identification Complete
      
      📋 VM Identity:
      - 🆔 VM ID: {{ windows_vm_id }}
      - 🏷️ Hostname: {{ windows_hostname }}
      - 🌐 MAC Address: {{ windows_mac_address }}
      - 💾 EFI Disk: {{ windows_disk0 }}
      - 💿 System Disk: {{ windows_disk1 }}
      - 📍 Storage Location: {{ windows_storage_location }}
